# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Check source code

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      
      - name: Give GitHub Actions access to custom fpdart repo
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: | 
            ${{ secrets.SECRET_FPDART_DEPLOY_KEY }}
            ${{ secrets.SECRET_PRIME_DEPLOY_KEY }}

      - uses: subosito/flutter-action@v2.3.0
        with:
          channel: 'stable'
          cache: true

      - name: Install dependencies
        run: flutter pub get

      # Uncomment this step to verify the use of 'dart format' on each commit.
      # - name: Verify formatting
      #   run: dart format --output=none --set-exit-if-changed .

      # Consider passing '--fatal-infos' for slightly stricter analysis.
      - name: Analyze project source
        run: flutter analyze

      # Your project will need to have tests in test/ and a dependency on
      # package:test for this step to succeed. Note that Flutter projects will
      # want to change this to 'flutter test'.
      - name: Run tests
        run: flutter test --coverage

      - name: 🧪✅❌ Publish test results
        id: compute_test_results
        uses: dorny/test-reporter@v1.6.0
        with:
          name: '🧪📊 Unit tests report'
          path: reports/test-results.json
          reporter: 'flutter-json'
          max-annotations: '50'
          # token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🧪📊 Publish coverage report
        if: github.event_name == 'pull_request'
        uses: romeovs/lcov-reporter-action@v0.3.1
        with:
          lcov-file: coverage/lcov.info
          # github-token: ${{ secrets.GITHUB_TOKEN }}
          title: 'Coverage Report'
