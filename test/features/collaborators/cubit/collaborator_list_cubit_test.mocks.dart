// Mocks generated by Mockito 5.4.2 from annotations
// in desafio_clock_it_in/test/features/collaborators/cubit/collaborator_list_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:desafio_clock_it_in/features/collaborators/models/collaborator.dart'
    as _i4;
import 'package:desafio_clock_it_in/features/collaborators/repositories/collaborator_local_repository.dart'
    as _i2;
import 'package:desafio_clock_it_in/features/collaborators/repositories/collaborator_remote_repository.dart'
    as _i5;
import 'package:desafio_clock_it_in/features/collaborators/services/notification_service.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [ICollaboratorLocalRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockICollaboratorLocalRepository extends _i1.Mock
    implements _i2.ICollaboratorLocalRepository {
  MockICollaboratorLocalRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> addColaborator(_i4.Collaborator? colaborator) =>
      (super.noSuchMethod(
        Invocation.method(
          #addColaborator,
          [colaborator],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> updateColaborator(
    int? index,
    _i4.Collaborator? colaborator,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateColaborator,
          [
            index,
            colaborator,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> deleteColaborator(int? index) => (super.noSuchMethod(
        Invocation.method(
          #deleteColaborator,
          [index],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  List<_i4.Collaborator> getColaborators() => (super.noSuchMethod(
        Invocation.method(
          #getColaborators,
          [],
        ),
        returnValue: <_i4.Collaborator>[],
      ) as List<_i4.Collaborator>);
  @override
  _i3.Future<void> clearColaborators() => (super.noSuchMethod(
        Invocation.method(
          #clearColaborators,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}

/// A class which mocks [ICollaboratorRemoteRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockICollaboratorRemoteRepository extends _i1.Mock
    implements _i5.ICollaboratorRemoteRepository {
  MockICollaboratorRemoteRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.Collaborator>> getCollaborators() => (super.noSuchMethod(
        Invocation.method(
          #getCollaborators,
          [],
        ),
        returnValue:
            _i3.Future<List<_i4.Collaborator>>.value(<_i4.Collaborator>[]),
      ) as _i3.Future<List<_i4.Collaborator>>);
}

/// A class which mocks [INotificationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockINotificationService extends _i1.Mock
    implements _i6.INotificationService {
  MockINotificationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<void> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> showNotificationWithColaborator(
          _i4.Collaborator? colaborator) =>
      (super.noSuchMethod(
        Invocation.method(
          #showNotificationWithColaborator,
          [colaborator],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
}
